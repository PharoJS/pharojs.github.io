{
    "title" : "PharoJS User Documentation",
    "author": "Dave Mason & Noury Bouraqadi"
}
!User Manual
!!Overview

PharoJS is a system to allow you to develop your code in Pharo using
all the tools available in the IDE, including refactoring browsers and
playgrounds, and then to be able to deploy your code to a Javascript
environment - web browser or NodeJS.

There are many ways you can approach this, depending on the nature of
your project and your preferred development workflow.

!!!Standalone Applications

Perhaps the simplest approach is to develop a standalone application
to run as a SPA (Single Page Application).
To do this simply subclass ==PjBrowserApplication== (or
==PjNodeApplication== for a Node application).
All the code in this class or its aubclasses will automatically be
able to access the standard globals specific to the platform.

If other classes require access to the globals, they simply need to
add the appropriate globals shared pool to the ==poolDIctioinaries:==
in the subclass definitions (see ==PjBrowserApplication== for an
example).

!!!Polyfills
Polyfills are a way to extend the functionality of a platform.
They are very common in NodeJS, because the basic system has only a
basic core of functionality.
For NodeJS they are loaded into the image via a ==require()== call.
Polyfills are handled the same as globals definitions, with the
addition of the necessary code to install the polyfill for the
platforms on which it is available.
(See ==PjWebSocketPolyfill== as an example which is used in
==PjNodeGlobals== to provide ==WebSocket== support for the bridge.)

==PjWebSocketPolyfill== is an excellent example if you need to write
your own polyfill to access.
The package ==PharoJsForNode== in the PharoJS repository contains
several polyfills to support ==Filesystem==, ==Readline==, and
==SQLite== (the first two are part of NodeJS, though not loaded by
default; the third is an external package).

The setup code for the polyfills is parameterized by Javascript engine
type by calling one or more of ==browserPolyfill:==, ==domPolyfill:==, and
==nodePolyfill:== methods.

!!Dealing with Callbacks

When using NodeJS, callbacks are a fact of life.
Many NodeJS packages provide functions that run asynchronously calling
a callback function upon error or completion.
The PharoJS way to provide these callbacks is with Smalltalk blocks.
Normally these will take 2 parameters: an error value and a success value.
The key point is that you should NOT attempt to return from these callback.
Firstly, the return will not make any sense as the original call stack has long since disappeared.
Secondly, Smalltalk non-local returns are implemented in PharoJS as throwing a value, which will appear to the
NodeJS runtime as an uncaught error, and abort execution.
